@page "/users"
@using Models = BlazorFluentUI.Models
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject IMSGraphApiServices MSGraphService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<style>
    .data-grid-row {
        min-height: 60px !important;
        height: auto !important;
    }
    
    .action-buttons-container {
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        gap: 8px !important;
        padding: 0 !important;
        margin: 0 !important;
        width: 100% !important;
        height: 100% !important;
        min-height: 60px !important;
    }
    
    .action-button {
        height: 40px !important;
        min-height: 40px !important;
        padding: 8px 12px 49px 12px !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        gap: 6px !important;
        font-size: 14px !important;
        white-space: nowrap !important;
        margin: 0 !important;
    }
    
    .action-button .fluent-icon {
        width: 16px !important;
        height: 16px !important;
    }
    
    /* Override FluentDataGrid cell styles for action column */
    .fluent-data-grid .col-actions {
        padding: 0 !important;
        vertical-align: middle !important;
    }
    
    /* Responsive design for mobile */
    @@media (max-width: 768px) {
        .action-button {
            padding: 6px 8px 36px 8px !important;
            min-width: 36px !important;
            height: 36px !important;
            min-height: 36px !important;
        }
        
        .action-button span {
            display: none !important;
        }
        
        .action-buttons-container {
            gap: 4px !important;
        }
    }
    
    @@media (max-width: 480px) {
        .action-button {
            padding: 4px 6px 32px 6px !important;
            min-width: 32px !important;
            height: 32px !important;
            min-height: 32px !important;
        }
    }
</style>

<PageTitle>Users - Azure B2C App Roles</PageTitle>

<FluentStack Orientation="Orientation.Vertical" VerticalGap="20">
    <FluentCard>
        <FluentLabel Typo="Typography.H2">
            <FluentIcon Value="@(new Icons.Regular.Size24.Person())" Color="Color.Accent" />
            Users
        </FluentLabel>
        <FluentDivider></FluentDivider>
        <FluentText Typo="Typography.Body">
            Manage Azure AD users and their role assignments.
        </FluentText>
    </FluentCard>

    <FluentCard>
        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="10" VerticalAlignment="VerticalAlignment.Center">
            <FluentTextField @bind-Value="SearchText" 
                             Placeholder="Search users by email"
                             Label="Search Users"
                             Style="flex: 1;" />
            <FluentButton Appearance="Appearance.Accent" 
                          IconStart="@(new Icons.Regular.Size16.Search())"
                          OnClick="@SearchUsers">
                Search
            </FluentButton>
            <FluentButton Appearance="Appearance.Neutral" 
                          IconStart="@(new Icons.Regular.Size16.ArrowClockwise())"
                          OnClick="@LoadAllUsers">
                Load All
            </FluentButton>
        </FluentStack>
    </FluentCard>

    @if (IsLoading)
    {
        <FluentProgressRing />
        <FluentText>Loading users...</FluentText>
    }
    else if (UsersList.Any())
    {
        <FluentDataGrid Items="@UsersList.AsQueryable()" GridTemplateColumns="2fr 2fr 1fr 1fr" TGridItem="Models.Users">
            <PropertyColumn Property="@(c => c.DispalyName)" Sortable="true" Title="Display Name" />
            <PropertyColumn Property="@(c => c.Email)" Sortable="true" Title="Email" />
            <PropertyColumn Property="@(c => c.Type)" Title="Type" />
            <TemplateColumn Title="Actions" Align="Align.Center">
                <div class="action-buttons-container">
                    <FluentButton Appearance="Appearance.Accent" 
                                  Size="Size.Small"
                                  IconStart="@(new Icons.Regular.Size16.Eye())"
                                  OnClick="@(() => ViewUserDetails(context))"
                                  Class="action-button">
                        <span>View Details</span>
                    </FluentButton>
                </div>
            </TemplateColumn>
        </FluentDataGrid>
    }
    else
    {
        <FluentMessageBar Intent="MessageIntent.Info">
            <FluentIcon Value="@(new Icons.Regular.Size20.Info())" />
            No users found. Use the search functionality or load all users.
        </FluentMessageBar>
    }

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <FluentMessageBar Intent="MessageIntent.Error">
            <FluentIcon Value="@(new Icons.Regular.Size20.ErrorCircle())" />
            @ErrorMessage
        </FluentMessageBar>
    }
</FluentStack>

<!-- User Details Dialog -->
<FluentDialog @bind-Hidden="HideUserDetailsDialog" Modal="true" TrapFocus="true" AriaLabel="User details">
    <FluentDialogHeader ShowDismiss="true">
        <FluentStack VerticalAlignment="VerticalAlignment.Center">
            <FluentIcon Value="@(new Icons.Regular.Size24.Person())" />
            <FluentLabel Typo="Typography.PaneHeader">
                User Details
            </FluentLabel>
        </FluentStack>
    </FluentDialogHeader>

    <FluentDialogBody>
        @if (SelectedUser != null)
        {
            <FluentStack Orientation="Orientation.Vertical" VerticalGap="15">
                <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="10">
                    <FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">Name:</FluentLabel>
                    <FluentText>@SelectedUser.DispalyName</FluentText>
                </FluentStack>
                <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="10">
                    <FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">Email:</FluentLabel>
                    <FluentText>@SelectedUser.Email</FluentText>
                </FluentStack>
                <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="10">
                    <FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">Type:</FluentLabel>
                    <FluentText>@SelectedUser.Type</FluentText>
                </FluentStack>
                <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="10">
                    <FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">ID:</FluentLabel>
                    <FluentText>@SelectedUser.Id</FluentText>
                </FluentStack>
            </FluentStack>
        }
    </FluentDialogBody>

    <FluentDialogFooter>
        <FluentButton Appearance="Appearance.Neutral" 
                      OnClick="@(() => HideUserDetailsDialog = true)">
            Close
        </FluentButton>
    </FluentDialogFooter>
</FluentDialog>

@code {
    private List<Models.Users> UsersList = new();
    private Models.Users? SelectedUser;
    
    private bool IsLoading = false;
    private bool HideUserDetailsDialog = true;
    
    private string ErrorMessage = string.Empty;
    private string SearchText = string.Empty;

    private async Task LoadAllUsers()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();

            UsersList = await MSGraphService.GetUsersAsync();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading users: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task SearchUsers()
    {
        if (string.IsNullOrWhiteSpace(SearchText))
        {
            await LoadAllUsers();
            return;
        }

        try
        {
            IsLoading = true;
            StateHasChanged();

            UsersList = await MSGraphService.GetMembersByTypeAndFilterAsync("user", SearchText);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error searching users: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private void ViewUserDetails(Models.Users user)
    {
        SelectedUser = user;
        HideUserDetailsDialog = false;
    }
}
